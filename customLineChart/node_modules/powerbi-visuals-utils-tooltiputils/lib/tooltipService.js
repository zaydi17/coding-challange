import { selectAll, pointers } from "d3-selection";
import * as touch from "./tooltipTouch";
const DefaultHandleTouchDelay = 500;
export function createTooltipServiceWrapper(tooltipService, rootElement, handleTouchDelay = DefaultHandleTouchDelay) {
    return new TooltipServiceWrapper({
        tooltipService: tooltipService,
        rootElement: rootElement,
        handleTouchDelay: handleTouchDelay,
    });
}
export class TooltipServiceWrapper {
    constructor(options) {
        this.visualHostTooltipService = options.tooltipService;
        this.rootElement = options.rootElement;
        this.handleTouchDelay = options.handleTouchDelay;
    }
    addTooltip(selection, getTooltipInfoDelegate, getDataPointIdentity, reloadTooltipDataOnMouseMove) {
        if (!selection || !this.visualHostTooltipService.enabled()) {
            return;
        }
        let rootNode = this.rootElement;
        let internalSelection = selectAll(selection.nodes());
        // Mouse events
        internalSelection.on("mouseover.tooltip", (event, data) => {
            // Ignore mouseover while handling touch events
            if (!this.canDisplayTooltip(event)) {
                return;
            }
            let coordinates = this.getCoordinates(event, rootNode, true);
            let tooltipInfo = getTooltipInfoDelegate(data);
            if (tooltipInfo == null) {
                return;
            }
            let selectionIds = getDataPointIdentity ? [getDataPointIdentity(data)] : [];
            this.visualHostTooltipService.show({
                coordinates: coordinates,
                isTouchEvent: false,
                dataItems: tooltipInfo,
                identities: selectionIds
            });
        });
        internalSelection.on("mouseout.tooltip", (event, data) => {
            this.visualHostTooltipService.hide({
                isTouchEvent: false,
                immediately: false,
            });
        });
        internalSelection.on("mousemove.tooltip", (event, data) => {
            // Ignore mousemove while handling touch events
            if (!this.canDisplayTooltip(event)) {
                return;
            }
            let coordinates = this.getCoordinates(event, rootNode, true);
            let tooltipInfo;
            if (reloadTooltipDataOnMouseMove) {
                tooltipInfo = getTooltipInfoDelegate(data);
                if (tooltipInfo == null) {
                    return;
                }
            }
            let selectionIds = getDataPointIdentity ? [getDataPointIdentity(data)] : [];
            this.visualHostTooltipService.move({
                coordinates: coordinates,
                isTouchEvent: false,
                dataItems: tooltipInfo,
                identities: selectionIds
            });
        });
        // --- Touch events ---
        let touchStartEventName = touch.touchStartEventName();
        let touchEndEventName = touch.touchEndEventName();
        let isPointerEvent = touch.usePointerEvents();
        internalSelection.on(touchStartEventName + ".tooltip", (event, data) => {
            let coordinates = this.getCoordinates(event, rootNode, true);
            let tooltipInfo = getTooltipInfoDelegate(data);
            let selectionIds = getDataPointIdentity ? [getDataPointIdentity(data)] : [];
            this.handleTouchTimeoutId = window.setTimeout(() => {
                this.visualHostTooltipService.show({
                    coordinates: coordinates,
                    isTouchEvent: true,
                    dataItems: tooltipInfo,
                    identities: selectionIds
                });
                this.handleTouchTimeoutId = undefined;
            }, this.handleTouchDelay);
        });
        internalSelection.on(touchEndEventName + ".tooltip", () => {
            this.cancelTouchTimeoutEvents();
        });
    }
    cancelTouchTimeoutEvents() {
        if (this.handleTouchTimeoutId) {
            clearTimeout(this.handleTouchTimeoutId);
        }
    }
    hide() {
        this.visualHostTooltipService.hide({ immediately: true, isTouchEvent: false });
    }
    canDisplayTooltip(event) {
        let canDisplay = true;
        const mouseEvent = event;
        if (mouseEvent.buttons !== undefined) {
            // Check mouse buttons state
            let hasMouseButtonPressed = mouseEvent.buttons !== 0;
            canDisplay = !hasMouseButtonPressed;
        }
        // Make sure we are not ignoring mouse events immediately after touch end.
        canDisplay = canDisplay && (this.handleTouchTimeoutId == null);
        return canDisplay;
    }
    getCoordinates(event, rootNode, isPointerEvent) {
        let coordinates;
        if (isPointerEvent) {
            // DO NOT USE - WebKit bug in getScreenCTM with nested SVG results in slight negative coordinate shift
            // Also, IE will incorporate transform scale but WebKit does not, forcing us to detect browser and adjust appropriately.
            // Just use non-scaled coordinates for all browsers, and adjust for the transform scale later (see lineChart.findIndex)
            // coordinates = d3.mouse(rootNode);
            // copied from d3_eventSource (which is not exposed)
            let e = event, s;
            while (s = e.sourceEvent)
                e = s;
            let rect = rootNode.getBoundingClientRect();
            coordinates = [
                e.clientX - rect.left - rootNode.clientLeft,
                e.clientY - rect.top - rootNode.clientTop
            ];
        }
        else {
            let touchCoordinates = pointers(event);
            if (touchCoordinates && touchCoordinates.length > 0) {
                coordinates = touchCoordinates[0];
            }
        }
        return coordinates;
    }
}
//# sourceMappingURL=tooltipService.js.map